services:
  mlflow-postgres:
    image: postgres:13-alpine
    container_name: mlflow_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_MLFLOW_USER}
      - POSTGRES_PASSWORD=${POSTGRES_MLFLOW_PASSWORD}
      - POSTGRES_DB=${POSTGRES_MLFLOW_DB}
    volumes:
      - mlflow-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_MLFLOW_USER}"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - mlflow-network
  
  minio:
    image: minio/minio
    container_name: mlflow_minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - mlflow-network
  
  create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 10
      mc alias set local http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      mc ls local/mlflow-artifacts || mc mb local/mlflow-artifacts;
      mc policy set public local/mlflow-artifacts;
      exit 0;
      "
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    restart: "no"
    networks:
      - mlflow-network

  mlflow-server:
    build:
      context: ./mlflow
      dockerfile: Dockerfile.mlflow
    container_name: mlflow_server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
    depends_on:
      mlflow-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      create-bucket:
        condition: service_completed_successfully
    command: >
      mlflow server 
      --host 0.0.0.0 
      --port 5000 
      --backend-store-uri postgresql://${POSTGRES_MLFLOW_USER}:${POSTGRES_MLFLOW_PASSWORD}@mlflow-postgres:5432/${POSTGRES_MLFLOW_DB} 
      --default-artifact-root s3://mlflow-artifacts/
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - mlflow-network

volumes:
  mlflow-postgres-data:
  minio-data:

networks:
  mlflow-network:
    driver: bridge