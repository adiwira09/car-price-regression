services:
  mlflow-postgres:
    image: postgres:13-alpine
    container_name: mlflow_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_MLFLOW_USER}
      - POSTGRES_PASSWORD=${POSTGRES_MLFLOW_PASSWORD}
      - POSTGRES_DB=${POSTGRES_MLFLOW_DB}
    volumes:
      - mlflow-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_MLFLOW_USER}"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - mlflow-network

  minio:
    image: minio/minio
    container_name: mlflow_minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - mlflow-network

  create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 10
      mc alias set local http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      mc ls local/mlflow-artifacts || mc mb local/mlflow-artifacts;
      mc policy set public local/mlflow-artifacts;
      exit 0;
      "
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    restart: "no"
    networks:
      - mlflow-network

  mlflow-server:
    build:
      context: ./mlflow
      dockerfile: Dockerfile.mlflow
    container_name: mlflow_server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      mlflow-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      create-bucket:
        condition: service_completed_successfully
    command: >
      mlflow server 
      --host 0.0.0.0 
      --port 5000 
      --backend-store-uri postgresql://${POSTGRES_MLFLOW_USER}:${POSTGRES_MLFLOW_PASSWORD}@mlflow-postgres:5432/${POSTGRES_MLFLOW_DB} 
      --default-artifact-root s3://mlflow-artifacts/
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - mlflow-network

  fastapi:
    build:
      context: ./app
      dockerfile: Dockerfile.fastapi
    container_name: fastapi_app
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI:-http://mlflow-server:5000}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL:-http://minio:9000}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - POSTGRES_MLFLOW_HOST=${POSTGRES_MLFLOW_HOST:-mlflow-postgres}
      - POSTGRES_MLFLOW_USER=${POSTGRES_MLFLOW_USER}
      - POSTGRES_MLFLOW_PASSWORD=${POSTGRES_MLFLOW_PASSWORD}
      - POSTGRES_MLFLOW_DB=${POSTGRES_MLFLOW_DB}
      - SECRET_KEY=${SECRET_KEY}
      - API_KEY=${API_KEY}
    expose:
      - "8000"
    depends_on:
      - mlflow-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - mlflow-network
    command: uvicorn app:app --host=0.0.0.0 --port=8000

  nginx:
    image: nginx:latest
    container_name: nginx_reverse_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - fastapi
    networks:
      - mlflow-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_server
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - mlflow-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_server
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mlflow-network

  postgres-exporter:
    image: wrouesnel/postgres_exporter:latest
    container_name: postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_MLFLOW_USER}:${POSTGRES_MLFLOW_PASSWORD}@mlflow-postgres:5432/${POSTGRES_MLFLOW_DB}?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - mlflow-postgres
    restart: unless-stopped
    networks:
      - mlflow-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    restart: unless-stopped
    networks:
      - mlflow-network

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - mlflow-network

volumes:
  mlflow-postgres-data:
  minio-data:
  prometheus-data:
  grafana-data:

networks:
  mlflow-network:
    name: mlflow-network
    driver: bridge